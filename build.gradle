defaultTasks 'clean', 'build'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin:com.smokejumperit.gradle.ExecPlugin

sourceCompatibility = 1.6
targetCompatibility = 1.6

buildscript {
    repositories { maven { url "http://repo.smokejumperit.com" } }
    dependencies { classpath 'com.smokejumperit:gradle-plugins:0.8.2' }
}

repositories {
    maven { url "http://repo1.maven.org/maven2" }
    maven { url "http://sardine.googlecode.com/svn/maven/" }
    maven { url "http://repo2.maven.org/maven2/org/bouncycastle" }
}

sourceSets {
    main {
        java { srcDir 'src' }
        resources {
            srcDir 'src'
            exclude '**/*.7z'; // I tend to hide some experimental codes here
        }
    }
}

// Project specific default output directory
eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }

dependencies {
    // dropbox client / jcifs 1.3.12
    // compile files(fileTree(dir: 'lib', includes: ['*.jar']))

    // compile "com.googlecode.sardine:sardine:314"
    compile "org.slf4j:slf4j-api:1.5.8" // 1.7.5
    compile "org.slf4j:slf4j-log4j12:1.5.8" // 1.7.5
    compile "org.apache.httpcomponents:httpclient:4.2.5"

    // Cifs code looks good but I don't have shares to use so I skip this
    // compile "jcifs:jcifs:1.3.17"
    compile "commons-lang:commons-lang:2.6"
    compile "org.apache.commons:commons-compress:1.3" // 1.5

    compile "org.bouncycastle:bcprov-jdk16:1.46"
    compile "javax.servlet:servlet-api:2.5"
}

mainClassName = "jfs.JFileSync"

startScripts {
    doLast {
        // Add some more reasonable memory settings to JFileSync3
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-ms1280m -mx1536m -Xms1280m -Xmx1536m"')
        windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-ms1280m -mx1536m -Xms1280m -Xmx1536m')
        // Armor start script to use javaw and start when not used as a command line tool
        windowsScript.text = windowsScript.text.replace('java.exe', '%JAVA_CMD%')
        windowsScript.text = windowsScript.text.replace('@rem Find %JAVA_CMD%', 'set JAVA_PREFIX=start "JFileSync3 starting..."\nset JAVA_CMD=javaw.exe\nif "x%~1" == "x" goto noparams\nset JAVA_PREFIX=\nset JAVA_CMD=java.exe\n:noparams\n\n@rem Find java.exe')
        windowsScript.text = windowsScript.text.replace('"%JAVA_EXE%" %DEFAULT_JVM_OPTS%', '%JAVA_PREFIX% "%JAVA_EXE%" %DEFAULT_JVM_OPTS%')
    }
}

distZip {
    // TODO: later...
    // into(project.name+"/bin") {
    //	from 'scripts'
    //	include 'E*.bat'
    //  include '*.ico'
    //}
    into(project.name) {
        from '.'
        include 'legal/*.*'
        include 'profiles/*.*'
        include 'README.md'
    }
    // I personally have the JCE stuff prepared there
    into(project.name) {
        from '..'
        include 'jce-jre-patches/**'
    }
    // You might package your personal profiles in here
    into(project.name) {
        from '..'
        include 'profiles/**'
    }
}

task(encryptionTest) << {
    // Extract distribution
    println "Extracting distribution"
    ant.unzip(src: "$buildDir/distributions/${project.name}.zip", dest: "$buildDir")
    // Extract test data
    println "Extracting test data"
    ant.unzip(src: "test/test-folders.zip", dest: "$buildDir/${project.name}")

    println "Encrypting"
    String cmd = "cmd /c bin${File.separator}${project.name} -config ..\\..\\test\\1-encrypt-with-metadata.xml -nogui -nohistory -quiet"
    project.exec(cmd, "$buildDir/${project.name}")

    println "Decrypting taking every folders metadata into account"
    cmd = "cmd /c bin${File.separator}${project.name} -config ..\\..\\test\\2-decrypt-with-metadata.xml -nogui -nohistory -quiet"
    project.exec(cmd, "$buildDir/${project.name}")

    println "Decrypting ignoring every folders metadata"
    cmd = "cmd /c bin${File.separator}${project.name} -config ..\\..\\test\\3-decrypt-without-metadata.xml -nogui -nohistory -quiet"
    project.exec(cmd, "$buildDir/${project.name}")

    println "And now please compare by hand"
    cmd = "cmd /c bin${File.separator}${project.name} -config ..\\..\\test\\4-compare-resulting-folders.xml -nohistory"
    project.exec(cmd, "$buildDir/${project.name}")
}
