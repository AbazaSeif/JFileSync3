{"name":"JFileSync3","tagline":"File Syncing based on JFileSync with encryption and compression for local folders and WebDAV backends. Also (partly) compatible with encfs / boxcryptor (classic)  volumes.","body":"Java based File Syncing Tool\r\n============================\r\n\r\n[![Latest Release](https://img.shields.io/github/release/mgoellnitz/JFileSync3.svg)](https://github.com/mgoellnitz/JFileSync3/releases/latest)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/54fff1994a1064db0e000071/badge.svg?style=flat)](https://www.versioneye.com/user/projects/54fff1994a1064db0e000071)\r\n\r\nFile syncing with optional compression and encryption for local and WebDAV folders. For local folder encryption can use\r\nEncFS and thus be compatible with encfs4win, BoxCryptor Classic, Encdroid and so on. (With GUI, command line, and stored\r\nprofiles.)\r\n\r\nFind more on the scenarios where this tool might help you in in the growing\r\n[project wiki](https://github.com/mgoellnitz/JFileSync3/wiki).\r\n\r\nThis software was developed because I personally needed an easy to use syncing tool to have everyday backups of highly\r\nconfidential material - business and private. And none of the services I came accross could suite these needs.\r\n\r\nThe second reason why I find it helpful is, that I very much rely on online-syncing tools for everyday backups and felt\r\nforced to use more than one of these services. Using too many of them slows down your local machine too much, so I\r\nidentified a set of backup areas which didn't need online syncing but just regular cloud based backup. Some of the\r\nsyncing services available provide WebDAV backends, so I can decide to use a service online or manual (scheduled).\r\n\r\nIt is heavily based on the work of Jens Heidrich and the JFileSync2.2. After some hacking aroung in his code I felt that\r\nthis one here is a fork, ripping out his original remove backends and changing the purpose quite a lot.\r\n\r\nJFileSync is a SourceForge project and available via the following URL:\r\n\r\n```\r\nhttp://jfilesync.sourceforge.net/\r\n```\r\n\r\nDon't mix the derived work here and his clean software on sourceforge. Only bother him if it's related to his original\r\nversion. Other complaints go here :-) Feel free to add any issues to this project here.\r\n\r\nOther contributions - though not directly committed by him - are from https://github.com/srmo\r\n\r\n\r\nOnline Scenario\r\n---------------\r\n\r\nYou replaced (or want to) your regular backups with online syncing tools and don't have backup media anymore.\r\nThis helps doing backups of your work in remote situations where e.g. don't want to carry confidential backup media\r\nwith you.\r\n\r\nPossible Solutions:\r\n\r\na) Trust the providers\r\n\r\nSelect any of them - I have some personal notes on the in the wiki.\r\n\r\nb) Trust the providers encryption\r\n\r\nUse Teamdrive, or iDrive Sync. With Teamdrive you can - in some cases - even see the encrypted files depending on the\r\nbackend you use. With iDrive Sync you have to provide a custom password as a base for the generated keys (This rips\r\nout some functions like sharing which gives you a hint, that they really do what they are saying).\r\n\r\nc) Encrypt locally on every file access and thus only sync encrypted stuff which you can still see.\r\n\r\nBoxcryptor, EncFS come into my mind. Disadvantage here is the de- and encryption on nearly every access. Really locally\r\nstored are only the encrypted files.\r\n\r\nd) If you trust your local system and need to store frequently accessed files, you would like to encrypt only short\r\nbefore or on backing up/syncing files.\r\n\r\nThis is where this software fills the gap. It can sync directories, local or webdav, and it can do this with either of\r\nthese encrypted. Additionally it can sync with encfs volumes stored in local folders. It is my common practice, that\r\nthe local encrypted folders are in turn synced with one of the online syncing services.\r\n\r\nIf you use EncFS in this scenario, it is possible to access the encrypted and synced files from mobile devices with\r\nBoxcryptor Classic for iOS and Android and additionally EncFS tools for android. Also this EncFS solution is compatible\r\nwith encfs4win and of course Linux based encfs.\r\n\r\n\r\nRequirements\r\n------------\r\n\r\n- Java 7 Runtime Environment, Java 8 supported (see 'http://java.oracle.com')\r\n\r\n- Only when using other algorithms than AES: JCE extension  (see 'http://java.oracle.com')\r\n\r\n\r\nInstallation and Application Start\r\n----------------------------------\r\n\r\nUnzip the distribution file to a directory of your choice.\r\n\r\nYou can start the application through\r\n\r\n- a Windows launcher ('JFileSync3.exe')\r\n- a batch file ('bin/JFileSync3.bat')\r\n- a Unix shell script ('bin/JFileSync3')\r\n- a Unity launcher script\r\n\r\nATTENTION: Because JFileSync is distributed as a Zip archive, Unix users will have to give executable rights manually\r\nbefore launching the application, e.g.: 'chmod a+rx JFileSync.sh'.\r\n\r\nNearly all functions of JFileSync3 can be controlled via the Graphical User Interface (GUI). However, JFileSync3\r\nprovides full access to all features (apart from plug-ins) via the command line interface. Call 'bin/JFileSync -help' to\r\nget an overview of all possible command line options.\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nJFileSync works with profiles controlling which folders to use, which files to include or ommit, how to log into WebDAV\r\nservers, and which encryption cipher and passphrase to use.\r\n\r\nThese profiles need to be set up and can be stored in XML files. The distribution contains a set of profile file examples\r\nillustrating all the intended scenarios.\r\n\r\n\r\nLicense and Usage Terms\r\n-----------------------\r\n\r\nThis program is free software; you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free Software\r\nFoundation; either version 2 of the License, or (at your option) any later\r\nversion.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\r\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\r\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with\r\nthis program; if not, write to the Free Software Foundation, Inc., 51 Franklin\r\nSt, Fifth Floor, Boston, MA, 02110-1301, USA\r\n\r\nJFileSync3 uses libraries or parts of Open Source projects where additionally some of the are included as source code:\r\n\r\n- EncFS Java: LGPL (Source)\r\n\r\n- Sardine: Apache\r\n\r\n- Apache http components: Apache\r\n\r\n- Apache commons: Apache\r\n\r\n- IO-Tools: new BSD\r\n\r\n- Bouncy Castle providers: BC\r\n\r\n- SevenZip/LZMA: LZMA SDK is written and placed in the public domain by Igor Pavlov. (Source)\r\n\r\nSome code in LZMA SDK is based on public domain code from another developers:\r\n  1) PPMd var.H (2001): Dmitry Shkarin\r\n  2) SHA-256: Wei Dai (Crypto++ library)\r\n\r\n- log4j: Apache\r\n\r\n- JCIFS: LGPL\r\n\r\n- SLF4J: MIT\r\n\r\n- Eclipse icons: the Common Public License - v 1.0.\r\n\r\nYou can find a copy all licenses of JFileSync3 and the used libraries in the 'legal' folder of this distribution.\r\n\r\n\r\nDevelopment Notes\r\n-----------------\r\n\r\nRequired packages for JFileSync3 development (not included in the distribution):\r\n\r\n- Java 7 SDK >= 1.7.0 (see 'http://java.sun.com') (Java 8 should be working)\r\n- Gradle >= 1.4 (see 'http://www.gradle.org' - Recommended are versions 2.2.1 and up)\r\n\r\nUsed and as a result recommended development tools:\r\n\r\n- Java 7 SDK 1.7.0\r\n- Netbeans 8.0\r\n\r\nThe following structure describes all folder and files included in the JFileSync3 source repository:\r\n\r\n- src: Java source code\r\n- legal: The program licenses.\r\n- profiles: Sample syncing profiles.\r\n- ubuntu: Ubuntu Unity desktop integration files\r\n- win: start scripts for parts of the system as tools - and a Windows icon file\r\n- test: profiles and data for the encryption test suite\r\n\r\nThe encryption backend tries its very best to avoid known plaintext attacks with filenames like in directory names\r\n(\"src/main/java\") and with the contents of the files.\r\n\r\nThe contents are compressed before they are encrypted (in most cases - depending on size and special file types) and the\r\nsoftware tries three algorithms to do that - LZMS, BZIP2, Deflate - in parallel.\r\n\r\nThe filenames are encoded, scrambled and then encrypted.\r\n\r\nMetafiles to speed up access of the directory structures don't have constant names but calculated ones.\r\n\r\nPasswords to derive keys from are not constant along the whole directory structure.\r\n\r\nYou will need the unlimited encryption add-on by Oracle for your JDK, if you want to use anything except the default\r\ncipher AES.\r\n\r\nFeel free to issue bug reports and ideas here.\r\n\r\n\r\nBuilding and Packaging\r\n----------------------\r\n\r\n\r\nThe software is built through the usual\r\n\r\n```bash\r\ngradle build\r\n```\r\n\r\nand can be started - e.g. for IDE integration - through\r\n\r\n```bash\r\ngradle run\r\n```\r\n\r\nA basic packaging can be generate with\r\n\r\n```bash\r\ngradle distZip\r\n```\r\n\r\nTake the ZIP file from build/distributions.\r\n\r\nOptionally - if launch4j is installed and available on your path - you can build with\r\n\r\n```bash\r\ngradle clean build launch4j\r\ngradle distZip\r\n```\r\n\r\nso that the distribution will contain an additional JFileSync3.exe executable file. This is the way, the distribution\r\npackages are generated.\r\n\r\na small test-suite can be found in profiles/test (which is not packaged in the distribtions zip) and can be called via\r\n\r\n```bash\r\ngradle encryptionTest\r\n```\r\n","google":"UA-59511125-3","note":"Don't delete this file! It's used internally to help with page regeneration."}